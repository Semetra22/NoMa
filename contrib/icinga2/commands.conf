object NotificationCommand "noma-host-notification" {
  import "plugin-notification-command"
  command = [ "/usr/local/noma/notifier/alert_via_noma.pl" ]
  arguments = {
    "-c" = {
      value = "s"
      description = "check type. h = host, s = service."
      order = 1
    }
    "-s" = {
      value = "$host.state$"
      description = "host state string"
      order = 2
    }
    "-H" = {
      value = "$host.name$"
      order = 3
    }
    "-G" = {
      value = "$noma_host_groups$"
      description = "host groups for the host"
      order = 4
    }
    "-o" = {
      value = "$host.output$"
      order = 7
    }
    "-n" = {
      value = "$notification.type$"
      order = 8
    }
    "-a" = {
      value = "$host.display_name$"
      description = "host alias"
      order = 9
    }
    "-i" = {
      value = "$address$"
      description = "host address. can be overridden setting 'vars.address' in service/notification/user."
      order = 10
    }
    "-t" = {
      value = "$icinga.timet$"
      description = "unix timestamp"
      order = 11
    }
    "-u" = {
      value = "1"
      description = "unique id. unsupported by Icinga 2."
      order = 12
    }
    "-A" = {
      value = "$notification.author$"
      description = "set if type is custom or acknowledgement"
      order = 13
    }
    "-C" = {
      value = "$notification.comment$"
      description = "set if type is custom or acknowledgement"
      order = 14
    }
    "-R" = {
      value = "$user.name$"
      description = "notification recipient(s)"
      order = 15
    }
    "-p" = {
      set_if = "$noma_use_pipe$"
      description = "use pipe instead of socket for daemon communication"
      order = 16
    }
  }

  vars.noma_use_pipe = false

  vars.noma_host_groups = {{
    host.groups.join(",") //prepare string for noma
    //host.groups //pass multiple arguments (requires NoMa 2.1.0)
  }}
}

object NotificationCommand "noma-service-notification" {
  import "plugin-notification-command"
  command = [ "/usr/local/noma/notifier/alert_via_noma.pl" ]
  arguments = {
    "-c" = {
      value = "s"
      description = "check type. h = host, s = service."
      order = 1
    }
    "-s" = {
      value = "$service.state$"
      description = "service state string"
      order = 2
    }
    "-H" = {
      value = "$host.name$"
      order = 3
    }
    "-G" = {
      value = "$noma_host_groups$"
      description = "host groups for the host this service belongs to"
      order = 4
    }
    "-E" = {
      value = "$noma_service_groups$"
      description = "service groups for this service"
      order = 5
    }
    "-S" = {
      value = "$service.name$"
      order = 6
    }
    "-o" = {
      value = "$service.output$"
      order = 7
    }
    "-n" = {
      value = "$notification.type$"
      order = 8
    }
    "-a" = {
      value = "$host.display_name$"
      description = "host alias"
      order = 9
    }
    "-i" = {
      value = "$address$"
      description = "host address. can be overridden setting 'vars.address' in service/notification/user."
      order = 10
    }
    "-t" = {
      value = "$icinga.timet$"
      description = "unix timestamp"
      order = 11
    }
    "-u" = {
      value = "1"
      description = "unique id. unsupported by Icinga 2."
      order = 12
    }
    "-A" = {
      value = "$notification.author$"
      description = "set if type is custom or acknowledgement"
      order = 13
    }
    "-C" = {
      value = "$notification.comment$"
      description = "set if type is custom or acknowledgement"
      order = 14
    }
    "-R" = {
      value = "$user.name$"
      description = "notification recipient(s)"
      order = 15
    }
    "-p" = {
      set_if = "$noma_use_pipe$"
      description = "use pipe instead of socket for daemon communication"
      order = 16
    }
  }

  vars.noma_use_pipe = false

  vars.noma_host_groups = {{
    host.groups.join(",") //prepare string for noma
    //host.groups //pass multiple arguments (requires NoMa 2.1.0)
  }}
  vars.noma_service_groups = {{
    service.groups.join(",") //prepare string for noma
    //service.groups //pass multiple arguments (requires NoMa 2.1.0)
  }}
}
